Default Binding:
	- In non-strict binding, if no other mechanisms are used to define THIS then it defaults to the global object
	- For strict mode inthe above scenario, THIS is undefined
	
Implicit Binding:
	- If the function being called is a property of an object, the object is the 'context object' for THIS. So, THIS refers to the object.
	
	function foo() {
		console.log( this.a );
	}
	var obj = {
		a: 2,
		foo: foo
	};
	obj.foo(); // 2
	
	- The function call is preceded by the reference to it's context object
	- Implicit binding can be lost by reassigning the function with the context object to a variable and calling it from that variable
		- OR in callback functions (because parameter passing is an implicit variable assignment)
		
Explicit Binding:
	- Use call() or apply() methods to set the context object for the function
	
	function foo() {
		console.log( this.a );
	}
	var obj = {
		a: 2
	};
	foo.call( obj ); // 2
	
	-When passing a primitive as THIS object context it becomes the object form of the primitive (ie new String())
		-Behavior is different in strict mode, THIS is just the actual primitive value
		
	-HARD BINDING
		- create a function that manually invokes another function with call(obj) and the desired context object which forcibly set THIS as the context object regardless of where the function is called from
		- common patter is to wrap functions  with a helper that takes the function, and is arguments and returns the invocation of the passed function by invoking it with apply(fn, args)
		
		function foo(something) {
			console.log( this.a, something );
			return this.a + something;
		}
		
		function bind(fn, obj) {
			return function() {
				return fn.apply( obj, arguments );
			};
		}
		var obj = {
			a: 2
		};

		var bar = bind( foo, obj );
		var b = bar( 3 ); // 2 3
		console.log( b ); // 5
		
		- this is so common it's provided as a built in utility
		
		function foo(something) {
			console.log( this.a, something );
			return this.a + something;
		}
		var obj = {
			a: 2
		};
		var bar = foo.bind( obj );
		var b = bar( 3 ); // 2 3
		console.log( b ); // 5
		
NEW BINDING

	- When a function is invoked with new in front of it, otherwise known as a constructor call, the following things are done automatically:
		1. A brand new object is created (aka constructed) out of thin air.
		2. The newly constructed object is [[Prototype]]-linked.
		3. The newly constructed object is set as the this binding for thatfunction call.
		4. Unless the function returns its own alternate object, the new-invoked function call will automatically return the newly constructed object.
		
PRECEDENCE OF HOW THIS IS DETERMINED

	1. Called with new? Use the newly constructed object.
	2. Called with call or apply (or bind)? Use the specified object.
	3. Called with a context object owning the call? Use that context object.
	4. Default: undefined in strict mode, global object otherwise.
	
	
	
	
'use-strict'
const publicationMetadata = {
  name: 'Test Publication',
  type: 'sql',
  table: 'Test_Table',
  columns: ['col1','col2','col3']
}

const sftpPublicationMetadata = {
  name: 'Test SFTP Publication',
  type: 'sftp',
  table: 'Test_Table',
  columns: ['col1','col2','col3'],
  targetFileName: 'file.dat',
  targetFilePath: '/path/to/file/',
}

function Publication(pubMetadata) {
  this.publicationName = pubMetadata.name;
  this.publicationType = pubMetadata.type;
  this.table = pubMetadata.table;
  this.columns = pubMetadata.columns;
  this.getColumns = function() {console.log(this.columns)}
  this.setPublicationName = function setPublicationName(name) {
    this.publicationName = name;
  };
  this.getPublicationName = function getPublicationName() {
    console.log(this.publicationName);
  };
}

const newPublication = new Publication(publicationMetadata);

newPublication.getPublicationName();
newPublication.setPublicationName('New Pub Name');
newPublication.getPublicationName();
newPublication.getColumns()
console.log('\n*********\n')


function SFTPPublication(sftpPublicationMetadata) {
  Publication.call(this, sftpPublicationMetadata);
  this.targetFileName = sftpPublicationMetadata.targetFileName;
  this.targetFilePath = sftpPublicationMetadata.targetFilePath;
}

// Object.assign(SFTPPublication.prototype, Publication.prototype);
Object.setPrototypeOf(SFTPPublication.prototype, Publication.prototype)

const sftpPublication = new SFTPPublication(sftpPublicationMetadata);

sftpPublication.getPublicationName();
sftpPublication.setPublicationName('sftp new Pub Name');
sftpPublication.getPublicationName();
sftpPublication.getColumns()
console.log('\n*********\n')

console.log(sftpPublication instanceof SFTPPublication)
console.log(sftpPublication instanceof Publication)
console.log(sftpPublication instanceof Object)
