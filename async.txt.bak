//============================================================================================

// spot the bug
function calculateAverage(arr) {
  let sum = 0;
  let count = 0;

  for (let i = 0; i < arr.length; i++) {
    if (typeof arr[i] === "number") {
      sum += arr[i];
      count++;
    }
  }

  return sum / count;
}


//============================================================================================

// gates
// We only want to do something when a dependency has happened
var a, b;
function foo(x) {
  a = x * 2;
  if (a && b) {
    baz();
  }
}

function bar(y) {
  b = y * 2;
  if (a && b) {
    baz();
  }
}

function baz() {
  console.log( a + b );
}
// ajax(..) is some arbitrary Ajax function given by a library
ajax( "http://some.url.1", foo );
ajax( "http://some.url.2", bar )





// latches
// We only want to do something if a dependency hasn't happend yet
// ex. if not error
var a;
function foo(x) {
  if (!a) {
    a = x * 2;
    baz();
  }
}
function bar(x) {
  if (!a) {
    a = x / 2;
    baz();
  }
}
function baz() {
  console.log( a );
}
// ajax(..) is some arbitrary Ajax function given by a library
ajax( "http://some.url.1", foo );
ajax( "http://some.url.2", bar );




// cooperative concurency

var res = [];
// `response(..)` receives array of results from the Ajax call
function response(data) {
  // add onto existing `res` array
  res = res.concat(
    // make a new transformed array with all
    // `data` values doubled
    data.map( function(val){
      return val * 2;
    } )
  );
}
// ajax(..) is some arbitrary Ajax function given by a library
ajax( "http://some.url.1", response );
ajax( "http://some.url.2", response );

// VERSUS

var res = [];
// `response(..)` receives array of results from the Ajax call
function response(data) {
  // let's just do 1000 at a time
  var chunk = data.splice( 0, 1000 );
  // add onto existing `res` array
  res = res.concat(
  // make a new transformed array with all
  // `chunk` values doubled
    chunk.map( function(val){
      return val * 2;
    } )
  );
  // anything left to process?
  if (data.length > 0) {
    // async schedule next batch
    setTimeout( function() {
      response( data );
    }, 0 );
  }
}
// ajax(..) is some arbitrary Ajax function given by a library
ajax( "http://some.url.1", response );
ajax( "http://some.url.2", response )


// SITE TO SITE TEMPLATE POC

// publish npm package

// https://docs.npmjs.com/creating-and-publishing-scoped-public-packages